options {
  STATIC=false;
  UNICODE_INPUT =true;
}

PARSER_BEGIN(CleanCoderCommentParser)
  package CommentParser;
  import java.util.ArrayList;
  import java.util.List;
  import Dictionaly.*;

public class CleanCoderCommentParser{
}
PARSER_END(CleanCoderCommentParser)

SKIP :{
    <  SPACE:([" ","\t","\n","\r","\f"])+ >
}

TOKEN :
{
       <LINE_COMMENT:"//"(~["\n","\r"])* ("\n"|"\r\n" | "\r")? >
        | < BLOCK_COMMENT: "/*" (~["*"])*("*")+ (~["/","*"](~["*"])*("*")+)* "/" >
        | < OTHERS:~[] >
}

ArrayList<String> comment():
{
    Token t,t2;
    ArrayList<String> result= new ArrayList<String>();
}
{
      ( others()
          ( t = < LINE_COMMENT > 
            {
                 result.add(t.image.replaceAll("\n", ""));
            }
            | t2=< BLOCK_COMMENT >
            {
                result.add(t2.image);
            }
          )
          others() )*
        {
                return result;
        }

}
String others():
{
        String result="";
        Token t;
}
{
        (t= <OTHERS>
         {
         try {
           result += t.image;
         } catch (NullPointerException e) {
           e.printStackTrace();
         }
         }
        )*
        {
                return result;
        }
}
