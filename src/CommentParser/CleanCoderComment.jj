options {
  STATIC=false;
  UNICODE_INPUT =true;
}

PARSER_BEGIN(CleanCoderCommentParser)
  package CommentParser;

  import java.util.ArrayList;
  import Dictionaly.*;
  import ResultData.*;

public class CleanCoderCommentParser{
}
PARSER_END(CleanCoderCommentParser)

SKIP :{
    <  SPACE:([" ","\t","\r","\f"])+ >
}

TOKEN :
{
       <LINE_COMMENT:"//"(~["\n","\r"])* ("\n"|"\r\n" | "\r")? >
       | < BLOCK_COMMENT: "/*" (~["*"])*("*")+ (~["/","*"](~["*"])*("*")+)* "/" >
       | < OTHERS:~[] >
}
ArrayList<String> comment():
{
    Token lineComment,blockComment;
    String firstOthers,lastOthers;
    ArrayList<String> result = new ArrayList<String>();
   
}
{
      ( firstOthers = others()
          ( lineComment = < LINE_COMMENT > 
            {
                 result.add(lineComment.image.replaceAll("\n", ""));
            }
            | blockComment =< BLOCK_COMMENT >
            {
                result.add(blockComment.image);
            }
          )
          lastOthers = others())*
      {
               return result;
      }

}
String others():
{
        String result="";
        Token t;
}
{
        (t= <OTHERS>
         {
         	try {
         	  result += t.image;
        	 } catch (NullPointerException e) {
        	   e.printStackTrace();
       	    }
         }
        )*
        {
                return result;
        }
}
