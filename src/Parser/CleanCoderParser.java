/* Generated By:JavaCC: Do not edit this line. CleanCoderParser.java */
        package Parser;
        import java.util.ArrayList;
        import java.util.List;
        import Dictionaly.*;

        public class CleanCoderParser implements CleanCoderParserConstants {

  final public String comment() throws ParseException {
   String result="";
   Token t1,t2;
    t1 = jj_consume_token(BACK);
    t2 = jj_consume_token(BACK);
    result = japanese();
                {if (true) return t1.image+t2.image+result;}
    throw new Error("Missing return statement in function");
  }

  final public String japanese() throws ParseException {
  String result="";
  String w;
    label_1:
    while (true) {
      w = word();
        result+=w;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALL_LITERAL:
      case LAGRGE_LITERAL:
      case OTHERS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String word() throws ParseException {
  Token t1,t2,t3,t4,t5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHERS:
      t1 = jj_consume_token(OTHERS);
   {if (true) return t1.image;}
      break;
    case SMALL_LITERAL:
      t2 = jj_consume_token(SMALL_LITERAL);
   {if (true) return t2.image;}
      break;
    case LAGRGE_LITERAL:
      t3 = jj_consume_token(LAGRGE_LITERAL);
   {if (true) return t3.image;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<String> VariableDeclaration() throws ParseException {
    String resultText = "";
        String name="";
        String expr="";
        List<String> result = new ArrayList<String>();
        Token t;
    type();
    name = name();
    expr = expr();
          if(name.isEmpty()){
          }else{
            String[] names = name.split(",",0);
          if(names.length == 1){
             resultText +="\u5909\u6570\u540d"+names[0]+expr;
          }else{
            resultText +="\u5909\u6570\u540d"+names[0]+expr+"\u306e";
          }
          for(int i=1; i<names.length; i++)
          {
                        System.out.println(names[i]);
                        if( i == names.length-1)
                        {
                          resultText+=names[i];
                        }
                        else{
                          resultText+=names[i]+",";
                        }
          }
          resultText+="\u304b\u3089\u5f79\u5272\u304c\u63a8\u6e2c\u3067\u304d\u307e\u305b\u3093\uff0e\u5909\u6570\u540d\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\uff0e";
          }
          result.add(resultText);
          resultText = "";
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      name = name();
      expr = expr();
          if(name.isEmpty()){
          }else{
            String[] names = name.split(",",0);
          if(names.length == 1){
             resultText +="\u5909\u6570\u540d"+names[0]+expr;
          }else{
            resultText +="\u5909\u6570\u540d"+names[0]+expr+"\u306e";
          }
          for(int i=1; i<names.length; i++)
          {
                        System.out.println(names[i]);
                        if( i == names.length-1)
                        {
                          resultText+=names[i];
                        }
                        else{
                          resultText += names[i]+",";
                        }
          }
          resultText+="\u304b\u3089\u5f79\u5272\u304c\u63a8\u6e2c\u3067\u304d\u307e\u305b\u3093\uff0e\u5909\u6570\u540d\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\uff0e";
          }
          result.add(resultText);
          resultText = "";
    }
    jj_consume_token(SEMICOLON);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String name() throws ParseException {
  Token t;
  String result="",name;
  WebDicitonaly dictionaly = new WebDicitonaly();
    if (jj_2_1(2147483647)) {
      result = snakeCaseName();
    } else if (jj_2_2(2147483647)) {
      result = camelCaseName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALL_LITERAL:
        name = commonName();
                if(dictionaly.searchDictionaly(name)){
                        System.out.println(name);
                } else{
                  result=name;
                }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String expr() throws ParseException {
  Token t1 = null,t2 = null,t3 = null,t4 = null,t5 = null,t6 = null,t7 = null;
  String result="";
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      t1 = jj_consume_token(LEFT_BRACKET);
         try {
                result += t1.image;
                 } catch (NullPointerException e) {
                           e.printStackTrace();
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALL_LITERAL:
      case LAGRGE_LITERAL:
      case DIGITS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITS:
          t2 = jj_consume_token(DIGITS);
         try {
                result += t2.image;
                 } catch (NullPointerException e) {
                           e.printStackTrace();
                }
          break;
        case SMALL_LITERAL:
          t3 = jj_consume_token(SMALL_LITERAL);
         try {
                result += t3.image;
                 } catch (NullPointerException e) {
                           e.printStackTrace();
                }
          break;
        case LAGRGE_LITERAL:
          label_4:
          while (true) {
            t4 = jj_consume_token(LAGRGE_LITERAL);
         try {
                result += t4.image;
                 } catch (NullPointerException e) {
                           e.printStackTrace();
                }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LAGRGE_LITERAL:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_4;
            }
          }
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      t5 = jj_consume_token(RIGHT_BRACKET);
         try {
                result += t5.image;
                 } catch (NullPointerException e) {
                           e.printStackTrace();
                }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      jj_consume_token(DIGITS);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case SHORT:
    case INT:
    case LONG:
    case CHAR:
    case UNSIGNED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
        jj_consume_token(UNSIGNED);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
        jj_consume_token(LONG);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String commonName() throws ParseException {
        String result ="",name;
        Token t1=null,t2=null;
    label_5:
    while (true) {
      t1 = jj_consume_token(SMALL_LITERAL);
                               result += t1.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        t2 = jj_consume_token(DIGITS);
                                                                      result += t2.image;
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALL_LITERAL:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String snakeCaseName() throws ParseException {
        List<String> errorResult = new ArrayList<String>();
        List<String> allName = new ArrayList<String>();
        String tokenName,outPutString="";
        String searchText;
        WebDicitonaly dictionaly = new WebDicitonaly();
        Token underbar;
    tokenName = commonName();
           //辞書を検索する．
                if(dictionaly.searchDictionaly(tokenName)){
                        System.out.println(tokenName);
                } else{
                  //辞書に存在しない場合，errorResultに加える．
                  errorResult.add(tokenName);
                }
                allName.add(tokenName);
    label_6:
    while (true) {
      underbar = jj_consume_token(UNDERBAR);
      tokenName = commonName();
                if(dictionaly.searchDictionaly(tokenName)){
                        System.out.println(tokenName);
                } else{
                  errorResult.add(tokenName);
                }
                allName.add(underbar.image);
                allName.add(tokenName);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDERBAR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
    }
                //変数名を表示する．
                for (int i = 0; i < allName.size(); i++) {
                        if (allName.get(i).isEmpty()) {
                        } else {
                                outPutString += allName.get(i);
                        }
                }
                outPutString += ",";
                //適切でない命名を表示する．
                for (int i = 0; i < errorResult.size(); i++) {
                        if (errorResult.get(i).isEmpty()) {
                        } else {
                                if( i == errorResult.size()-1 )
                 {
                                        outPutString += errorResult.get(i);

                                }else{
                                        outPutString += errorResult.get(i)+",";

                                }
                        }
                }
                if(errorResult.isEmpty()){
                        {if (true) return "";}
                }else{
                   System.out.println("outPutString:"+outPutString);
                        {if (true) return outPutString;}

                }
    throw new Error("Missing return statement in function");
  }

  final public String camelCaseName() throws ParseException {
        String result;
        Token t = null;
        List<String> errorResult = new ArrayList<String>();
        List<String> allName = new ArrayList<String > ();
        String tokenName,name,outPutString="";
        WebDicitonaly dictionaly = new WebDicitonaly();
        Token largeLiteral;
    tokenName = commonName();
                if(dictionaly.searchDictionaly(tokenName)){
                        System.out.println(tokenName);
                } else{
                        errorResult.add(tokenName);
                }
                allName.add(tokenName);
    label_7:
    while (true) {
      largeLiteral = jj_consume_token(LAGRGE_LITERAL);
      tokenName = commonName();
         if(dictionaly.searchDictionaly(largeLiteral.image+tokenName)){
         System.out.println(largeLiteral+tokenName);
         } else{
         errorResult.add(largeLiteral+tokenName);
         }
         allName.add(largeLiteral+tokenName);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAGRGE_LITERAL:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
    }
                //変数名を表示する．
                for (int i = 0; i < allName.size(); i++) {
                        if (allName.get(i).isEmpty()) {
                        } else {
                                outPutString += allName.get(i);
                        }
                }
                outPutString +=",";
                //適切でない命名を表示する．
                for (int i = 0; i < errorResult.size(); i++) {
                        if (errorResult.get(i).isEmpty()) {
                        } else {
                                if( i == errorResult.size()-1 ){
                                        outPutString += errorResult.get(i);
                                }else{
                                        outPutString += errorResult.get(i)+",";
                                }
                        }
                }
                if(errorResult.isEmpty()){
                        {if (true) return "";}
                }else{
                        {if (true) return outPutString;}
                }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(UNDERBAR)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(LAGRGE_LITERAL)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(SMALL_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(DIGITS)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    if (jj_3R_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    Token xsp;
    if (jj_3R_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    Token xsp;
    if (jj_3R_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CleanCoderParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100c000,0x100c000,0x20000,0x4000,0x100000,0x8000,0x1c000,0x1c000,0x80000,0x1000,0xe80,0x1fc0,0x10000,0x4000,0x40000,0x8000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CleanCoderParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CleanCoderParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CleanCoderParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CleanCoderParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CleanCoderParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CleanCoderParser(CleanCoderParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CleanCoderParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
